# 워크플로우의 이름
name: CI/CD

#워크 플로우가 시작될 조건 지정
on:
  push:
    branches: [ main ]
#실행 환경 지정
jobs:
  build:
    runs-on: ubuntu-latest
#실행스텝지정
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # Gradle 빌드 (dev 프로파일 활성화)
      - name: Build with Gradle (dev profile)
        run: ./gradlew clean build -x test -Dspring.profiles.active=dev
      # 빌드 로그 출력 (디버깅용)
      - name: Check build output
        run: |
          echo "Listing build/libs directory"
          ls -al ./build/libs  # 빌드 후 생성된 파일을 출력
      #2 현재시간가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"
      # 3 배포용 패키지 경로 저장
      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV
      # SSH로 EC2에 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # GitHub Secrets에 저장된 EC2 private key
          EC2_USER: ubuntu  # EC2에서 사용하는 사용자 (예: ec2-user, ubuntu 등)
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소 (예: EC2 public IP)
        run: |
          # EC2 서버로 SSH 연결하기 위해서 private key를 저장하고, SSH-agent를 사용하여 인증
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH를 통해 EC2 서버에 파일을 복사하고 애플리케이션을 실행
          scp -i private_key.pem ./build/libs/${{env.artifact}} $EC2_USER@$EC2_HOST:/home/$EC2_USER/ # EC2 서버로 파일 복사
          
          ssh -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            java -jar /home/$EC2_USER/${{env.artifact}}
          EOF
