# 워크플로우의 이름
name: CI/CD

# 워크플로우가 시작될 조건 지정
on:
  push:
    branches: [ main ]

# 실행 환경 지정
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 (dev 프로파일 활성화)
      - name: Build with Gradle (dev profile)
        run: ./gradlew clean build -x test -Dspring.profiles.active=dev

      # 빌드 로그 출력 (디버깅용)
      - name: Check build output
        run: |
          echo "Listing build/libs directory"
          ls -al ./build/libs  # 빌드 후 생성된 파일을 출력

      # 현재 시간 가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # 배포용 패키지 경로 저장
      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs/*.jar)" >> $GITHUB_ENV  # 특정 .jar 파일 경로 저장

      # SSH로 EC2에 배포
      - name: Deploy to EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ARTIFACT: ${{ env.artifact }}
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # 기존 애플리케이션 종료 
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "pkill -f 'java -jar' || true"

          # 새로운 파일 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no -C $ARTIFACT $EC2_USER@$EC2_HOST:/home/$EC2_USER/

          # 애플리케이션을 백그라운드에서 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "nohup java -jar /home/$EC2_USER/$(basename $ARTIFACT) > /dev/null 2>&1 &"
